
interface ProjectInfo {
  title: string;
  description: string;
  channelData?: any;
  features: string[];
  designPrinciples: string[];
  currentStructure: any;
  githubUrl?: string;
  netlifyUrl?: string;
  lastModified: Date;
}

export const generateReadme = (projectInfo: ProjectInfo): string => {
  const { title, description, channelData, features, designPrinciples, githubUrl, netlifyUrl } = projectInfo;

  return `# ${title}

${description}

## 🎥 Channel Information
${channelData ? `
- **Channel Name**: ${channelData.title}
- **Subscribers**: ${parseInt(channelData.subscriberCount || '0').toLocaleString()}
- **Videos**: ${parseInt(channelData.videoCount || '0').toLocaleString()}
- **Total Views**: ${parseInt(channelData.viewCount || '0').toLocaleString()}
- **Custom URL**: ${channelData.customUrl || 'N/A'}
` : 'Real YouTube channel data integrated'}

## ✨ Features
${features.map(feature => `- ${feature}`).join('\n')}

## 🎨 Design Principles
${designPrinciples.map(principle => `- ${principle}`).join('\n')}

## 🏗️ Architecture
This project uses an intelligent AI-powered editing system that enables:

### Smart Component Editing
- **Component-Level Targeting**: AI identifies and modifies specific elements
- **Design Preservation**: Maintains existing styling and layout
- **Memory System**: Learns from previous edits for better context
- **Real-Time Validation**: Ensures changes don't break functionality

### File Structure
- \`index.html\` - Main website page with real YouTube data
- \`componentMap.json\` - Maps all editable components
- \`design.json\` - Design system tokens and variables
- \`changelog.md\` - Complete history of AI-powered edits
- \`chat-history.json\` - Conversation log with context

### AI Editing Commands
The AI assistant understands natural language commands like:
- "Make the subscribe button bigger and red"
- "Change the hero title color to blue"
- "Update the header background"
- "Add animation to video thumbnails"

## 🚀 Deployment
${netlifyUrl ? `- **Live Site**: [${netlifyUrl}](${netlifyUrl})` : ''}
${githubUrl ? `- **Source Code**: [GitHub Repository](${githubUrl})` : ''}

## 🧠 AI Features
- **Smart Intent Parsing**: Converts natural language to component actions
- **Context Awareness**: Remembers project structure and previous changes
- **Targeted Modifications**: Changes only requested elements
- **Design Consistency**: Maintains YouTube branding and responsive design
- **Real Data Integration**: Uses actual channel statistics and video thumbnails

## 🛠️ Development
This website was built using:
- **AI Editor**: Lovable AI with advanced component targeting
- **Framework**: HTML/CSS/JavaScript with YouTube API integration
- **Styling**: Custom CSS with YouTube brand colors
- **Deployment**: Automated via GitHub integration
- **Memory System**: Persistent chat history and edit tracking

## 📝 Edit History
All changes are automatically tracked in \`changelog.md\` with:
- Timestamp of each modification
- Component affected
- User request that triggered the change
- Technical details of the implementation

---

*This README was automatically generated by the Smart Project Manager system.*
*Last updated: ${projectInfo.lastModified.toLocaleString()}*
`;
};

export const generateProjectFeatures = (
  projectIdea: string,
  channelData: any,
  generatedCode: string
): string[] => {
  const features = [
    '🎯 Smart AI component-level editing',
    '📱 Fully responsive design',
    '🎨 YouTube brand-consistent styling',
    '💬 Intelligent chat-based modifications'
  ];

  if (channelData) {
    features.push(
      `📊 Real ${channelData.title} channel statistics`,
      '🎥 Live video thumbnail integration',
      '👥 Dynamic subscriber count display'
    );
  }

  if (generatedCode?.includes('animation')) {
    features.push('✨ Smooth animations and transitions');
  }

  if (generatedCode?.includes('grid') || generatedCode?.includes('flex')) {
    features.push('📐 Modern CSS Grid/Flexbox layout');
  }

  features.push(
    '🔄 Real-time preview updates',
    '📚 Complete edit history tracking',
    '🚀 One-click deployment ready'
  );

  return features;
};
