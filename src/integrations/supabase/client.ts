
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ldcipixxhnrepgkyzmno.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxkY2lwaXh4aG5yZXBna3l6bW5vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk0ODc5ODAsImV4cCI6MjA2NTA2Mzk4MH0.DI6yuJwesNPoXTnB5aMDLNOVjPnMbN69kD7nCxFmiTI";

// Enhanced Supabase client configuration with proper auth handling and connection management
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      'x-client-info': 'lovable-app'
    }
  }
});

// Connection health monitoring
let connectionRetries = 0;
const maxRetries = 3;

// Enhanced error handling for connection issues
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_OUT' || event === 'TOKEN_REFRESHED') {
    connectionRetries = 0;
  }
});

// Connection health check utility
export const checkConnection = async (): Promise<boolean> => {
  try {
    const { error } = await supabase.from('profiles').select('count').limit(1);
    return !error;
  } catch {
    return false;
  }
};

// Retry wrapper for failed requests
export const retrySupabaseRequest = async <T>(
  request: () => Promise<T>,
  retries: number = maxRetries
): Promise<T> => {
  try {
    return await request();
  } catch (error) {
    if (retries > 0 && connectionRetries < maxRetries) {
      connectionRetries++;
      console.log(`Retrying Supabase request... (${connectionRetries}/${maxRetries})`);
      await new Promise(resolve => setTimeout(resolve, 1000 * connectionRetries));
      return retrySupabaseRequest(request, retries - 1);
    }
    throw error;
  }
};
